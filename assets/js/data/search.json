[ { "title": "프로젝트 캄브리아 - Quest Pro 유출", "url": "/posts/Meta-Quest-Pro-%EC%9C%A0%EC%B6%9C/", "categories": "디바이스, VR", "tags": "Meta, Project Cambria, Quest Pro", "date": "2022-07-29 22:29:49 +0900", "snippet": "원본 기사 : Project Cambria: Meta Quest Pro launch date, pricing, specifications and CAD renders surfaceThe Final Meta Quest Pro Analysis이 글은 원문의 기사를 번역하고, 필자의 의견을 덧붙여서 작성되었습니다. – 수정중..프로젝트 캄브리아Brad Lynch는 Meta의 차세대 VR 헤드셋의 코드명인 프로젝트 캄브리아에 대한 자신의 ‘최종 분석’을 제공했습니다. 각종 메체에서 출사가는 $1,000 ~ $1,500 정도로 예상되며, 컨트롤러는 $300정도에 충전기를 포함하여 따로 번들로 판메되어 Quest 2와 호환될것으로 보입니다. 하지만Brad Lynch는 드라이버 문제로 Quest 2와의 호환은 어려워 보인다고 주장합니다.소문에 따르면 2021은 10월 28일에 Meta Connect에서 Quest Pro와 컨트롤러를 공개할 예정입니다. 10월 25일에 정식 출시된다고 합니다.스펙Meta Quest Pro 해드셋 Qualcomm Snapdragon XR2 5G SoC 12 GB LPDDR5 RAM 256 GB storage Dual Tianjin-3 QLED panels 2,160 x 2,160 per eye (1,800 x 1,920 rendered per eye) 향상된 색영역을 위한 Quantum Dot layer local dimming 을 위한 MiniLED 백라이트 (점광원 백라이트) FoV 향상을 위한 21도 꺾인 배치 Counter-rotated Display 커스텀 펜케이크 렌즈 10 개의 센서와 Mixed Reality를 위한 IR Depth Projector (2) “Canyon” – 640 x 480 (IOT, 위치트레킹, 핸드트레킹) (2) “Glacier” – 1,280 x 1,024 (Depth, 패스스루, 위치트레킹, 핸드트레킹) (1) “Teton” – 2,328 x 1,748 (16 MP RGB 패스스루 오버레이) (5) “Esker” – 400 x 400 (페이셜트레킹, 아이트레킹) WiFi 6E 호환 향상된 공간 오디오 5,000 mAh 리튬이온 배터리 (충전도커 이용)Quest Pro 컨트롤러(코드명 Starlet) Qualcomm 662 SoC 독립형 6 DoF 추적을 위한 3개의 IR 카메라 비분리형 3,200mAh 배터리 HD 햅틱(핸들당 여러 액추에이터) 압력 센서Meta Quest Pro 해드셋페이셜트레킹, 아이트레킹유출된 CAD파일과 각 센서들의 위치를 찾아보았습니다.아이트래킹 시스템의 경우 모든 센서와 IR LED는 아이컵에 존제합니다. 페이셜트레킹시스템의 경우 모든 센서와 IR LED는 HMD 하우징 아래의 노즈 갭 옆과 양쪽 렌즈 중앙의 근접센서 근처에 있습니다. Counter-rotated Display디스플레이를 아래의 사진처럼 꺾인 배치하게 될 경우 일반적인 배치에 비하여 더 높은 FOV를 얻을 수 있게 되며, 노즈 갭을 더 여유롭게 가질 수 있어서 인체공학적으로 설계가 가능해집니다. 또한 슈퍼 샘플링/앤티 앨리어싱과 같은 후처리 과정에서의 아티팩트를 숨길수 있습니다. 미국 특허 11343486(Valve Corporation 제출)VR 에어브릿지VR 에어브릿지가 적용될 예정으로 예상되며, 기존의 공유기를 이용한 에어링크와 달리, USB동글형테로 무선연결을 구현해, 기존 에어링크 설정 시, 생기는 여러 문제점이 해결될 것으로 보입니다.Starlet 컨트롤러 비분리형 3,200mAh 배터리Starlet 컨트롤러는 IR카메라를 이용해서 공간추적을 하기 때문에 Snapdragon 662와 같은 온보드 SoC가 탑제 되있어 기존의 AA 배터리로는 전력이 부족해 도킹 충전식 3200mAh 배터리를 사용합니다. 컨트롤러 측면에서 도커충전기를 위한 3개의 접점을 볼 수 있습니다. HD 햅틱여러 햅틱 컨트롤러로 고품질 햅틱을 구현합니다. 반응성 진동을 위한 메인 트리거 내부에 LRA 액추에이터 핀칭 피드백을 위한 엄지 받침대 아래에 LRA 액추에이터 배터리 근처 핸들에 있는 하나의 VCM 액추에이터(고품질 진동 햅틱 메인 트리거 내의 LRA 액추에이터 및 위치/힘 센서압력 센서컨트롤러에는 손잡이 바닥에 있는 압력 센서는 “혼합 현실 또는 VR의 책상에 그리기” 와 관련이 있다고 추측했습니다. Starlet 바닥에 압력 센서가 있습니다." }, { "title": "PID 제어란?", "url": "/posts/PID-%EC%A0%9C%EC%96%B4%EB%9E%80/", "categories": "공학, 제어이론", "tags": "pid, 제어이론", "date": "2022-07-25 20:13:34 +0900", "snippet": "PID 제어의 개념P(비례) + I(적분) +D(미분)의 약자로, on-off 제어에 비해 높은 정확도를 얻을 수 있습니다.\\[{MV(t)} =K_{p}{e(t)}+{K_i}\\int_0^t e(t)\\,{dt}+K_d{\\frac{de}{dt}}\\] $ e(t) $ : error 시간$ {t} $에 따른 목표값과 현제 값의 차이. $ K_p, K_i, K_d $ : PID 파라미터 상수각 항에 대한 설명 $ K_p{e(t)} $ - 비레(Proportional)항 : 오차 $ e(t) $에 비로 하여 제어 값을 조절합니다. $ K_i\\int_0^t e(t)\\,{dt} $ - 적분(Integral)항 : 잔류 편차의 시간 적분에 비례하여 제어 값을 변화시킨다. $ K_d{\\frac{de}{dt}} $ - 미분(Differential)항 : 급격한 출력값의 변화가 발생한 경우 그 크기에 제어 값을 조절합니다. 다양한 PID 파라미터 ($ K_p, K_i, K_d $)가 시스템의 응답에 미치는 영향 위키백과비례 제어 (P)오차와 비레하여 제어값을 조절하여, 부드러운 제어가 가능하지만 측정값이 목표값에 도달하지 못하게 됩니다.비레 적분 제어 (PI)편차 가 있는 상태가 오래 지속되면 그만큼 입력 값의 변화를 크게 하여 편차를 없애는 동작을 합니다. 하지만 외란과 같은 급격한 오류값 변화가 있을경우 복원에 시간이 걸립니다.비레 적분 미분 제어 (PID)위의 PI동작의 단점을 보상하기 위해서 이전오류값과 현제 오류값의 차를 이용하여 제어값을 조절하여 빠르게 목표값에 도달할 수 있게 됩니다.이러한 제어를 함으로써 빠르고 정확하게 원하는 되는 값을 향한 제어할 수 있게 됩니다.참고 자료임장성 강사 - PID 제어란?@717lumos - [Control] PID 제어국제 테크노 정보연구소 - 모터의 PID 제어 법Ziegler – Nichols 튜닝법PID 제어기를 튜닝하는 여러 가지 방법 중 하나입니다. 이를 통하여 적절한 이득값을 얻을 수 있습니다.최종(ultimate) 값의 정의제어문의 결과가 수렴하거나 발산하지 않고 일정한 발진을 가지는 값을 뜻한다.Gain $=K_p$$K_u=$ 최종 이득$T_u=$ 최종 주기 $[1/m]$용법 $K_i$와 $K_d$를 0으로 한다. $K_p$값을 0부터 점점 증가하여 일정한 진동을 가질떼, $K_u, T_u$를 측정한다. 아레의 표를 참고하여 $K_p, K_i, K_d$값을 조정한다. 참조wikipedia - Ziegler – Nichols methodweb.yonsei.ac.kr - PID 제어기 설계 법C 의사코드//Gaindouble Kp 1.0double Ki 1.0double Kd 1.0double dt 0.01 // 100Hz동작일 경우double current_val; // 현재 값double err, prev_err; // 오차. 이전 오차double I_err, D_err; // 오차 적분. 오차 미분double Kp_term, Ki_term, Kd_term; // p 항, i 항, d 항double control; // outputerr = 0; // 오차 초기화void pid() // 일정 주기로 호출{ dt = get_dt(); // dt를 연산 error = get_error(); // error 값을 연산 err = AIM - current_val; // 오차 = 목표치-현재 값 Kp_term = Kp * err; // p 항 = Kp*오차 I_err += err * dt; // 오차 적분 += 오차*dt Ki_term = Ki * I_err; // i 항 = Ki*오차적 분 D_err = (err-prev_err)/dt // 오차 미분 = (현재 오차-이 전 오차)/dt Kd_term = Kd * D_err; // d 항 = Kd*오차 미분 prev_err = err; // 현재 오차를 이전 오차로 control = Kp_term + Ki_term + Kd_term; // 제어량 = p 항+i 항+d 항 ...}PID 시뮬레이터PID 제어를 엑셀로 실험해볼 수 있는 스프레드 시트 입니다.PID 제어 튜닝 시뮬레이터(PID Control tuning simulator using MS-Excel)" } ]
